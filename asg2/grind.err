==30462== Memcheck, a memory error detector
==30462== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==30462== Using Valgrind-3.14.0.GIT and LibVEX; rerun with -h for copyright info
==30462== Command: ./yshell
==30462== 
yshell: Bad: no such function
==30462== 
==30462== HEAP SUMMARY:
==30462==     in use at exit: 1,429 bytes in 37 blocks
==30462==   total heap usage: 247 allocs, 210 frees, 8,064 bytes allocated
==30462== 
==30462== 1,429 (80 direct, 1,349 indirect) bytes in 1 blocks are definitely lost in loss record 14 of 14
==30462==    at 0x4C2A453: operator new(unsigned long) (vg_replace_malloc.c:334)
==30462==    by 0x41682D: __gnu_cxx::new_allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> >::allocate(unsigned long, void const*) (new_allocator.h:111)
==30462==    by 0x4161D8: std::allocator_traits<std::allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> > >::allocate(std::allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> >&, unsigned long) (alloc_traits.h:436)
==30462==    by 0x4158CF: std::__allocated_ptr<std::allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> > > std::__allocate_guarded<std::allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> > >(std::allocator<std::_Sp_counted_ptr_inplace<directory, std::allocator<directory>, (__gnu_cxx::_Lock_policy)2> >&) (allocated_ptr.h:97)
==30462==    by 0x414C1B: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<directory, std::allocator<directory>>(std::_Sp_make_shared_tag, directory*, std::allocator<directory> const&) (shared_ptr_base.h:654)
==30462==    by 0x413E1C: std::__shared_ptr<directory, (__gnu_cxx::_Lock_policy)2>::__shared_ptr<std::allocator<directory>>(std::_Sp_make_shared_tag, std::allocator<directory> const&) (shared_ptr_base.h:1322)
==30462==    by 0x412FBC: std::shared_ptr<directory>::shared_ptr<std::allocator<directory>>(std::_Sp_make_shared_tag, std::allocator<directory> const&) (shared_ptr.h:360)
==30462==    by 0x411D9B: std::shared_ptr<directory> std::allocate_shared<directory, std::allocator<directory>>(std::allocator<directory> const&) (shared_ptr.h:707)
==30462==    by 0x4110C0: std::shared_ptr<directory> std::make_shared<directory>() (shared_ptr.h:723)
==30462==    by 0x40E7AA: inode::inode(file_type) (file_sys.cpp:108)
==30462==    by 0x40DDC2: inode_state::inode_state() (file_sys.cpp:33)
==30462==    by 0x41853D: main (main.cpp:50)
==30462== 
==30462== LEAK SUMMARY:
==30462==    definitely lost: 80 bytes in 1 blocks
==30462==    indirectly lost: 1,349 bytes in 36 blocks
==30462==      possibly lost: 0 bytes in 0 blocks
==30462==    still reachable: 0 bytes in 0 blocks
==30462==         suppressed: 0 bytes in 0 blocks
==30462== 
==30462== For counts of detected and suppressed errors, rerun with: -v
==30462== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
